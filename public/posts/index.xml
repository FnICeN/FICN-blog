<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>文章 on FICN&#39;s blog</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in 文章 on FICN&#39;s blog</description>
    <generator>Hugo -- 0.139.3</generator>
    <language>en</language>
    <lastBuildDate>Sun, 08 Dec 2024 21:35:47 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>First Post</title>
      <link>http://localhost:1313/posts/first-post/</link>
      <pubDate>Sun, 08 Dec 2024 21:35:47 +0800</pubDate>
      <guid>http://localhost:1313/posts/first-post/</guid>
      <description>&lt;h1 id=&#34;hello-world&#34;&gt;Hello World!&lt;/h1&gt;</description>
    </item>
    <item>
      <title>Stream流遍历处理字符串中各字符</title>
      <link>http://localhost:1313/posts/stream%E6%B5%81%E9%81%8D%E5%8E%86%E5%A4%84%E7%90%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%90%84%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Tue, 06 Sep 2022 20:34:54 +0800</pubDate>
      <guid>http://localhost:1313/posts/stream%E6%B5%81%E9%81%8D%E5%8E%86%E5%A4%84%E7%90%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%90%84%E5%AD%97%E7%AC%A6/</guid>
      <description>&lt;h1 id=&#34;stream在数组处理上的特点&#34;&gt;Stream在数组处理上的特点&lt;/h1&gt;
&lt;p&gt;首先明确一点：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; chs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;h&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; ints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {1,2,3,4};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; strs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//数组的Stream流泛型都是数组，而不是数组中的单个元素&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Stream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&amp;gt;&lt;/span&gt; chsStream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Stream.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(chs);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Stream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&amp;gt;&lt;/span&gt; intsStream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Stream.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(ints);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//String的Stream流泛型都是String&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Stream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; strStream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Stream.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(str);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Stream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; strsStream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Stream.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(strs);  &lt;span style=&#34;color:#75715e&#34;&gt;//在这种情况下，流中的每个元素都是String[]数组中的单个元素&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们的目的是处理数组中的每一个元素，那么对于Stream&amp;lt;T[]&amp;gt;这种类型的流我们一般是并不想见到的&lt;/p&gt;
&lt;p&gt;解决方法就是&lt;strong&gt;使用基本类型流&lt;/strong&gt;，即&lt;strong&gt;IntStream、DoubleStream&lt;/strong&gt;和&lt;strong&gt;LongStream&lt;/strong&gt;，然后再操作（或对基本类型流先进行&lt;code&gt;boxed()&lt;/code&gt;转为Stream&amp;lt;T&amp;gt;再操作），而得到基本类型流的方法有两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Arrays.stream()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;基本类型流名.of()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;stream处理字符串---以凯撒密码为例&#34;&gt;Stream处理字符串 - 以凯撒密码为例&lt;/h1&gt;
&lt;p&gt;若要对字符串中的每个字符进行逐个操作，最容易想到，也最快的方法就是先使用&lt;code&gt;toCharArray()&lt;/code&gt;将字符串转为一个char[]数组，再使用循环进行操作，最后使用String的构造方法将之再转换回字符串：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//正常方法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; chars &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str.&lt;span style=&#34;color:#a6e22e&#34;&gt;toCharArray&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; chars.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    chars&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;)((chars&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;k)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;26&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; String(chars));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;这次我舍近求远，想用Stream流来模拟生成凯撒密码密文的操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据Stream处理数组的特点，String转换成char[]之后，要想对数组的每个元素都进行操作，就要使用&lt;strong&gt;基本类型流&lt;/strong&gt;，&lt;strong&gt;但并没有char类型的基本类型流&lt;/strong&gt;，在这就导致我&lt;strong&gt;只能得到Stream&amp;lt;char[]&amp;gt;，而得不到如CharStream或是Stream&amp;lt;Character&amp;gt;的流&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，不能将String转为char[]数组&lt;/p&gt;
&lt;p&gt;那么，借助String[]数组的流中可以遍历到数组中的每个元素的特点，考虑将String转为String[]数组，再使用&lt;code&gt;map()&lt;/code&gt;将每个元素转换成char，这样才得到一个Stream&amp;lt;Character&amp;gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Stream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Stream.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(str.&lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//str:{&amp;#34;h&amp;#34;,&amp;#34;e&amp;#34;,&amp;#34;l&amp;#34;,&amp;#34;l&amp;#34;,&amp;#34;o&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Stream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Character&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; chStream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; t.&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;(s &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; s.&lt;span style=&#34;color:#a6e22e&#34;&gt;charAt&lt;/span&gt;(0));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chStream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; t.&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;(ch &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;)((ch&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;1)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;26&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* 也可直接一步完成操作：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;* s -&amp;gt; (char)((s.charAt(0)-&amp;#39;a&amp;#39;+1)%26+&amp;#39;a&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;得到了Stream&amp;lt;Character&amp;gt;以后，才能正式地开始遍历每个字符并处理。处理结束后，将Stream&amp;lt;Character&amp;gt;重新拼接成字符串即可&lt;/p&gt;</description>
    </item>
    <item>
      <title>Stream流进行数组排序</title>
      <link>http://localhost:1313/posts/stream%E6%B5%81%E8%BF%9B%E8%A1%8C%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 05 Sep 2022 09:49:04 +0800</pubDate>
      <guid>http://localhost:1313/posts/stream%E6%B5%81%E8%BF%9B%E8%A1%8C%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;p&gt;考虑一个数组：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; nums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {9,6,5,7,4,8,3,1,2};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于数组，列举几个转换Stream流的操作及返回值：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//返回Stream对象，但泛型为int[]数组&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Stream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&amp;gt;&lt;/span&gt; nums1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Stream.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(nums);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//返回一个IntStream对象，默认无泛型&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;IntStream nums2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; IntStream.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(nums);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;IntStream nums3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Arrays.&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;(nums);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;若想要对数组进行排序，则使用sorted()方法，但需要注意的是，IntStream的sorted无入参，即&lt;strong&gt;只能自然排序&lt;/strong&gt;，只有Stream中的sorted才能指定比较器，所以将之转化为Stream类型，再进行排序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//使用boxed()将IntStream转换为Stream类型，即将IntStream中的每个整型都进行装箱&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//nums2同理&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Stream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; boxedNums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nums3.&lt;span style=&#34;color:#a6e22e&#34;&gt;boxed&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//进行排序&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Stream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; sortedNums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; boxedNums.&lt;span style=&#34;color:#a6e22e&#34;&gt;sorted&lt;/span&gt;((o1,o2) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; o2&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;o1);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;排序完成后，仍是一个Stream对象。若想将之转换回数组，则使用toArray()方法&lt;/p&gt;
&lt;p&gt;但仍然需要注意，在Stream中，由于Stream的泛用性，toArray()返回的是Object类型的数组，而非int类型，所以，需要首先转化为IntStream，表示其中存储的都是整型数据，然后使用该对象中的toArray()方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//使用mapToInt转化为IntStream对象&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//此处的intValue是将原本的Integer包装类转换为int基本类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;IntStream temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sortedNums.&lt;span style=&#34;color:#a6e22e&#34;&gt;mapToInt&lt;/span&gt;(Integer::intValue);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//最终转换为数组&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; temp.&lt;span style=&#34;color:#a6e22e&#34;&gt;toArray&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下总结前文提到的Stream和IntStream的同名方法及必要说明，方便判断是否需要进行对象类型的转换：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stream:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stream&amp;lt;T&amp;gt; of(T t)：返回一个Stream对象，其泛型是参数泛型&lt;/li&gt;
&lt;li&gt;Stream sorted()：可带参可不带参&lt;/li&gt;
&lt;li&gt;Object[] toArray()：返回一个Obj的数组&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;IntStream：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IntStream of(int&amp;hellip; values)：返回一个IntStream对象，直接存有数组每个元素&lt;/li&gt;
&lt;li&gt;IntStream sorted()：只有无参的&lt;/li&gt;
&lt;li&gt;int[] toArray()：返回一个int的数组&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，Arrays.stream()也能返回一个IntStream对象，效果与IntStream.of()一致，且其针对数据数组有更多重载，泛用性更强&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
